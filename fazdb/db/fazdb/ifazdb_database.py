from __future__ import annotations
from contextlib import asynccontextmanager
from typing import AsyncGenerator, Protocol, TYPE_CHECKING

if TYPE_CHECKING:
    from sqlalchemy.ext.asyncio import (AsyncConnection, AsyncEngine,
                                        AsyncSession)

    from .model import BaseModel
    from .repository import *


class IFazdbDatabase(Protocol):
    @property
    def repositories(self) -> list[Repository]: ...
    @property
    def character_history_repository(self) -> CharacterHistoryRepository: ...
    @property
    def character_info_repository(self) -> CharacterInfoRepository: ...
    @property
    def fazdb_uptime_repository(self) -> FazdbUptimeRepository: ...
    @property
    def guild_history_repository(self) -> GuildHistoryRepository: ...
    @property
    def guild_info_repository(self) -> GuildInfoRepository: ...
    @property
    def guild_member_history_repository(self) -> GuildMemberHistoryRepository: ...
    @property
    def online_players_repository(self) -> OnlinePlayersRepository: ...
    @property
    def player_activity_history_repository(self) -> PlayerActivityHistoryRepository: ...
    @property
    def player_history_repository(self) -> PlayerHistoryRepository: ...
    @property
    def player_info_repository(self) -> PlayerInfoRepository: ...
    @property
    def worlds_repository(self) -> WorldsRepository: ...
    @asynccontextmanager
    async def enter_connection(self) -> AsyncGenerator[AsyncConnection, None]: ...
    @asynccontextmanager
    async def enter_session(self) -> AsyncGenerator[AsyncSession, None]: ...
    @asynccontextmanager
    async def must_enter_connection(self, connection: AsyncConnection | None = None) -> AsyncGenerator[AsyncConnection, None]: ...
    @asynccontextmanager
    async def must_enter_session(self, session: AsyncSession | None = None) -> AsyncGenerator[AsyncSession, None]: ...
    async def create_all(self) -> None: ...
    @property
    def engine(self) -> AsyncEngine: ...
    @property
    def driver(self) -> str: ...
    @property
    def user(self) -> str: ...
    @property
    def password(self) -> str: ...
    @property
    def host(self) -> str: ...
    @property
    def database(self) -> str: ...
    @property
    def base_model(self) -> BaseModel: ...
